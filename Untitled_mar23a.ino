#include "arduino_secrets.h"
// Arduino_JSON - Version: Latest 

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/605a0bdd-0d1c-46aa-b1fb-714e391cd98b 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int val;
  bool enabled;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include ""
#include <HTTPClient.h>
#include <ArduinoJson.h>

  
int inputPin = 27;   // choose the input pin (for PIR sensor)
int light = 0;
int startTime = 0;
int endTime = 0;
int elapsed = 0;
volatile int timeOff = 30000;
int hour = 0;
HTTPClient http;

boolean trovato = false;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  
  

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  startTime = millis();
  val = digitalRead(inputPin);
  if(enabled)
  {
    elapsed = startTime - endTime;
    endTime = millis();
    Serial.print("Tempo exec: ");
    Serial.println(elapsed);
    if(val == 0)
    {
      timeOff -= elapsed;
      if(timeOff <= 0 && light == 1)
      {
        lightOff();
        light = 0;
      }
    }
    else
    {
      timeOff = 30000;
      if(light == 0)
      {
        lightOn();
        light = 1;
      }
    }
    Serial.print("Timer: ");
    Serial.println(timeOff);
    //delay(25);
    }
}

void lightOn(){
    HTTPClient http;
    http.begin("https://maker.ifttt.com/trigger/light_on/json/with/key/no0nbXi0RYStdNrNtNXgqQ5DtVz64enFjY1QfgvPE-p");
    http.GET();
    http.end();
    Serial.print("Light ON");
}

void lightOff(){
    HTTPClient http;
    http.begin("https://maker.ifttt.com/trigger/light_off/json/with/key/no0nbXi0RYStdNrNtNXgqQ5DtVz64enFjY1QfgvPE-p");
    http.GET();
    http.end();
    Serial.print("Light OFF");
}

/*
  Since Pir is READ_WRITE variable, onPirChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPirChange()  {
  // Add your code here to act upon Pir change
}

/*
  Since Val is READ_WRITE variable, onValChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onValChange()  {
  // Add your code here to act upon Val change
}

/*
  Since Enabled is READ_WRITE variable, onEnabledChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onEnabledChange()  {
  // Add your code here to act upon Enabled change
}



